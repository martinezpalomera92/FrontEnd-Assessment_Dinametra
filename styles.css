/**
 * @file styles.css
 * @description Main stylesheet for the NEO Dashboard.
 *
 * --- TABLE OF CONTENTS ---
 * 1. Global Variables & Resets
 * 2. Main Layout (CSS Grid)
 * 3. Component Styles (Flexbox)
 * - Filter Controls
 * - Chart Containers
 * 4. Status Messages (Loading/Error)
 * 5. Header & Footer
 */

/* --- 1. Global Variables & Resets --- */
:root {
    --color-fondo: #f4f7f9;
    --color-superficie: #ffffff;
    --color-texto: #333;
    --color-primario: #005a9c; /* Dinametra-inspired blue */
    --color-error: #cf1322;
    --color-error-fondo: #fff1f0;
    --borde-radio: 8px;
    --sombra-caja: 0 4px 12px rgba(0,0,0,0.05);
}

/* A simple reset for a consistent base */
body {
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
    margin: 0;
    /* --- CORRECTION/ENHANCEMENT: Applying the space-themed background --- */
    /* Assuming the image is saved as 'nasa_neos_background.png' in the 'images' folder */
    background-image: url('/public/img/background.webp'); 
    background-size: cover; 
    background-position: center;
    background-repeat: no-repeat;
    background-attachment: fixed; /* Keeps the background static when content scrolls */
    
    /* Set a fallback color in case the image doesn't load */
    background-color: #1a1a2e; /* A dark space-like color */
    
    color: var(--color-texto);
    line-height: 1.6;
}
/* Optional: If the background is too dark, you might need to change var(--color-texto) to a lighter color here for global readability. For now, we keep it as is. */

h1, h2, h3 {
    margin: 0 0 0.5em 0;
    font-weight: 600;
}

/* --- 2. Main Layout (CSS Grid) --- */
/*
 * We use CSS Grid for the main page structure (Req 3).
 * This gives us a robust "skeleton" for our dashboard sections.
 */
.dashboard-container {
    display: grid;
    /* We define three logical rows: controls, status, and charts */
    grid-template-areas:
        "controles"
        "estado"
        "graficos";
    grid-template-rows: auto auto 1fr; /* The charts row fills remaining space */
    gap: 24px;
    padding: 24px;
    max-width: 1400px;
    margin: 0 auto; /* Center the whole dashboard */
}

/* Assign our HTML sections to the grid areas we just named */
.controls-section { grid-area: controles; }
#status-container { grid-area: estado; }
.charts-wrapper   { grid-area: graficos; }


/* --- 3. Component Styles (Flexbox) --- */

/* --- Filter Controls --- */
/*
 * We use Flexbox for the form components (Req 3).
 * 'flex-wrap: wrap' is the key to making the form responsive: on small
 * screens, the items will stack vertically instead of overflowing.
 */
#filters-form {
    display: flex;
    flex-wrap: wrap;
    gap: 16px;
    align-items: flex-end; /* Aligns the button nicely with the inputs */
    padding: 20px;
    background-color: var(--color-superficie);
    border-radius: var(--borde-radio);
    box-shadow: var(--sombra-caja);
}

.filter-group {
    display: flex;
    flex-direction: column;
    gap: 6px;
    flex-grow: 1; /* Allows date inputs to fill the available space */
}

#filters-title {
    flex-basis: 100%; /* Makes the title take a full row */
    margin: 0 0 8px 0;
    color: gainsboro;
    text-shadow: 
    0 0 0px #fff,        /* Inner, brighter glow */
    0 0 10px #0073e6,     /* Medium glow layer */
    0 0 15px #0073e6,
    0 0 20px #0073e6,
    0 0 25px #0073e6,
    0 0 30px #0073e6,
    0 0 35px #0073e6;    /* Outer, wider glow */
}

#filters-form label {
    font-size: 0.9em;
    font-weight: 500;
}

#filters-form input[type="date"] {
    padding: 8px 12px;
    border: 1px solid #ccc;
    border-radius: 4px;
    font-size: 1em;
}

#filters-form button {
    padding: 10px 20px;
    background-color: var(--color-primario);
    color: white;
    border: none;
    border-radius: 4px;
    font-size: 1em;
    font-weight: 600;
    cursor: pointer;
    transition: background-color 0.2s;
}

#filters-form button:hover {
    background-color: #004a80;
}

/* --- Chart Containers --- */
/*
 * Flexbox is used again for the charts wrapper (Req 3).
 * 'flex-wrap' will stack the charts on mobile.
 */
.charts-wrapper {
    display: flex;
    flex-wrap: wrap; /* <-- The magic for responsive charts! */
    gap: 24px;
}

/*
 * This is the core of the responsive chart layout (Req 3).
 * 'flex: 1 1 400px' is shorthand for:
 * - flex-grow: 1 (Allows chart to grow to fill space)
 * - flex-shrink: 1 (Allows chart to shrink)
 * - flex-basis: 400px (Tries to be 400px wide)
 *
 * This setup allows the grid to be 1, 2, or 3 columns wide
 * depending on the available screen width, automatically.
 */
.chart-container {
    flex: 1 1 400px;
    min-width: 300px; /* Prevents the chart from becoming unreadably small */
    background-color: var(--color-superficie);
    padding: 24px;
    border-radius: var(--borde-radio);
    box-shadow: var(--sombra-caja);
    /* Ensures the header and chart wrapper align vertically */
    display: flex;
    flex-direction: column;
}

/*
 * This inner wrapper gives us fine-grained control over the canvas size.
 * It's crucial for 'maintainAspectRatio: false' to work correctly.
 */
.chart-flex-wrapper {
    flex-grow: 1; /* Allows it to take all available vertical space in the card */
    position: relative; /* Required by Chart.js for responsiveness */
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 200px; /* Ensures even small charts have some space */
}

/*
 * This class limits the height of charts that look better
 * when they are not overly tall, like doughnuts.
 */
.chart-flex-wrapper.compact {
    max-height: 350px;
    height: 100%;
}

/*
 * This ensures the <canvas> element itself respects its parent's boundaries.
 */
.chart-container canvas {
    max-width: 100%;
    height: auto !important; /* Overrides Chart.js's inline style */
}


/* --- 4. Status Messages --- */

.status-container { /* This is the more consistent class name */
    padding: 16px;
    border-radius: var(--borde-radio);
    /* 'display: none' is the default; 'ui.js' will show this container */
    display: none;
}

.status-message {
    margin: 0;
    padding: 12px;
    border: 1px solid;
    border-radius: 4px;
    font-weight: 500;
}

#loading-message {
    background-color: #e6f7ff;
    border-color: #91d5ff;
    color: #096dd9;
}

#error-message {
    background-color: var(--color-error-fondo);
    border-color: #ffa39e;
    color: var(--color-error);
}

/* --- 5. Header & Footer --- */
.main-header, .main-footer {
    padding: 20px 24px;
    /* Since we have a space background, let's make the header and footer slightly transparent */
    background-color: rgba(255, 255, 255, 0.95); /* Semi-transparent white */
    box-shadow: var(--sombra-caja);
    text-align: center;
}

.main-header h1 {
    font-size: 1.5em;
    color: var(--color-primario);
    margin: 0;
}

.main-footer {
    margin-top: 24px;
    font-size: 0.9em;
    color: #777;
    background-color: rgba(255, 255, 255, 0.95); /* Semi-transparent white */
}

.main-footer a {
    color: var(--color-primario);
    text-decoration: none;
}

.main-footer a:hover {
    text-decoration: underline;
}